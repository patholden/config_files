================================================================
=                                                              =
=                      GIT-some stuff                          =
=                                                              =
================================================================
AGS Git repositories:  NOTE WHEN PULLING STUFF YOU NEED TO USE "origin" for
    		       LINUX or "master" for other remote repositories.
GIT Upstream Linux repository:
======================
git init
git remote add master https://github.com/patholden/linux.git
git config --global push.default
git remote -v  (Returns fetch & push URL)
git remote show (returns master)
git pull https://github.com/patholden/linux.git origin
GIT Upstream AGSD repository:
======================
git init
git remote add master https://github.com/patholden/agsd-lg.git
git config --global push.default
git remote -v  (Returns fetch & push URL)
git remote show (returns master)
git pull https://github.com/patholden/agsd-lg.git master
GIT Upstream CONFIG-FILES repository:
======================
git init
git remote add master https://github.com/patholden/config_files.git
git config --global push.default
git remote -v  (Returns fetch & push URL)
git remote show (returns master)
git pull https://github.com/patholden/config_files.git master
GIT Upstream TEST-FILES repository:
======================
git init
git remote add master https://github.com/patholden/test-files.git
git config --global push.default
git remote -v  (Returns fetch & push URL)
git remote show (returns master)
git pull https://github.com/patholden/test-files.git master
GIT Making changes (applies to any git repository):
======================
git commit -a (makes a local copy)
git push <master|origin>
GIT Syncing with upstream master(applies to any git repository):
======================
git checkout master
git commit -a (commits to local repository)
git pull <URL> <master|origin>
    Fix merge conflicts
    git commit -a  (will get message that you're in-synch)
GIT adding files:
======================
git add <filename>
git commit -a  (popup will have commit description you need to fill in and save)
git push <master|origin>
GIT recovering deleted file:
======================
(Delete file)
git pull <URL> <master|origin>
================================================================
=                                                              =
=                      BUILD-some stuff                        =
=                                                              =
================================================================
BUILD Environment changes:
Go to your home directory.  Create $(HOME)/newbuildroot directory, cd to it, download buildroot from https://buildroot.org/downloads/ and get last tar.gz from November, 2015.  gunzip & extract file (in your buildroot directory). Rename (mv) this directory $(HOME)/buildroot.
Go back to home directory.
Create ags, config, test, and linux headers directories.
Go to ags directory, follow GIT instructions for https://github.com/patholden/agsd-lg.git.
Go to linux directory, follow GIT instructions for https://github.com/patholden/linux.git.
Go to config directory, follow GIT instructions for https://github.com/patholden/config_files.git.
Go to test directory, follow GIT instructions for https://github.com/patholden/test-files.git.
Go to buildroot directory and do following:
1.  Copy ags-buildroot-config FROM your config file to buildroot directory .config.
2.  Run "make menu-config".  Change System configuration "rootoverlay" directory to be $(HOME)/buildroot/board/agslaser.  Change kernel configuration Local directory to your linux directory.  Change kernel configuration kernel config to your linux directory/.config.
3.  Make directory board/agslaser/rootfs_overlay.  Under rootfs_overlay you will need to create etc/ags/conf and debug.
3.  Run "make" and go have lunch.
Go into ags directory and set up operating directories in the ags daemon Makefile (at top of Makefile).
Go into linux directory and install headers:
1. make headers_install arch=x86_64 INSTALL_HDR_PATH=<your-headers-directory>, whatever that may be for your environment.
2.  Copy arch/x86/configs/agslaser_config to .config in Linux main directory.
Go to ags daemon directoy and run "make", then "make install".
Go into ags test directory and run "make", then "make install".  You need to also set up your directories at top of the test Makefile.
Go into buildroot directory and run "make".  If you made it this far, you're ready to burn a USB stick.
================================================================
=                                                              =
=                    FORMAT USB STICK                          =
=                                                              =
================================================================
Make a bootable USB stick:
     Need USB memory stick (I use SanDisk Cruzer 16GB).
     Figure out what linux assigns as /dev for USB stick.  Mine is /dev/sdb1.
     Make sure it's not currently mounted.
     Enter ¨sudo fdisk /dev/sdb¨.  Enter following at prompts:
         o<CR>
    	 n<CR>
    	 p<CR>
    	 1<CR>
	 (default first cylinder)<CR>
   	 (default last cylinder)<CR>
	 t<CR>
	 83<CR>
	 a<CR>  (Note:  here you may need to enter 1 if boot flag isn´t set)
    	 w<CR>
    	 quit
    Now run following commands as su:
    sudo mkfs -t ext2 /dev/sdb1
    (wait)
    sudo tune2fs -L <labelname> /dev/sdb1 (this is optional but I use it)
    sudo mkdir /mnt/usb
    sudo mount /dev/sdb1 /mnt/usb
If you don't have syslinux, then do next step:
    sudo wget http://www.kernel.org/pub/linux/utils/boot/syslinux/syslinux-4.04.tar.bz2
    sudo tar xvjf syslinux-4.04.tar.bz2 (any dir will do)
Move syslinux to the USB stick:
    cd syslinux-4.04
    cd mbr
    sudo su
    sudo cat mbr.bin >/dev/sdb  (this puts MBR in correct place at beginning of USB)
    cd ../extlinux
    ./extlinux --install /mnt/usb
    cd ~/ags
    cp <your-config-dir>/extlinux.conf /mnt/usb

================================================================
=                                                              =
=                      BURN-some stuff                         =
=                                                              =
================================================================
Go back to ags directory and run "make burnusb".
To run AGS operational code:
   Log in to system (login: root, pwd: temp1234).
   Run "/etc/ags/S50agsd start &" at prompt.
   syslogs are in /tmp/messages.  Just run "grep agsd /tmp/messages |more" to see them all. or grep on a specific buzz word you put into your log messages.
   Use LOG_DEBUG for debugging, LOG_NOTICE for info you want to log always, and LOG_ERR for any errors you want flagged and nonvolatile in messages.
   NOTE:  the USB stick is volatile so you lose anything you have in the logs once you reboot.
================================================================
=                                                              =
=                      KERNEL UPDATES                          =
=                                                              =
================================================================
If you need to modify the kernel for some reason:

Make changes in local linux directory that buildroot points to as local directory.
Compile in local directory to make sure you can do so.
Once compiled, go to buildroot top-level directory.  Run "rm -rf output/build/linux-custom".  Then run "make".  Buildroot will resync with your local directory and incorporate into new rootFS.
================================================================
=                                                              =
=                      DEBUGGING                               =
=                                                              =
================================================================
We have strace, gdb, and syslog (/tmp/messages).
Syslogs:  see section above (BURN SOME STUFF).  When displaying data:  %f is for double/float.  %lx is for [u]int64_t, %x is for [u]int32_t & [u]int16_t, %d decimal, %c single char, %s string.  I think %f & %lx are biggest changes for x86_64.
GDB:  I haven't got gdbinit quite working with the .c/.o files but the .c & .o are in the flash for now.  You can use gdb for basics, it's great for tracing seg-faults.  I'll work on the init so full debugging can be utilized (breakpoints, etc).


